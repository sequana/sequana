"""
Author: Dimitri Desvillechabrol
Affiliation: Institut Pasteur
Aim: Variant calling
Data: paired end or single reads
Run: snakemake -s Snakefile
"""
# Import -----------------------------------------------------------------------

import sequana
from sequana import snaketools as sm
from sequana.snaketools import SequanaConfig, FileFactory

# Import config file -----------------------------------------------------------

configfile: "config.yaml"
cfg = SequanaConfig(config)

# Python -----------------------------------------------------------------------

final_output = ["{0}/vcf_filter/{0}.vcf".format(cfg.PROJECT)]
indel_realigner_input = "{0}/bwa_mem/{0}.sorted.bam".format(cfg.PROJECT)
freebayes_input = "{0}/bwa_mem/{0}.sorted.bam".format(cfg.PROJECT)

# Mapping
include: sm.modules["bwa_mem"]

# Mapping report
if config["report_mapping"]["do"]:
    include: sm.modules["bed_genomecov"]
    include: sm.modules["report_mapping"]
    final_output.append(cfg.PROJECT + "/report/report_mapping.html")

# Mark duplicates
if config["mark_duplicates"]["do"]:
    include: sm.modules["mark_duplicates"]
    indel_realigner_input = "{0}/mark_duplicates/{0}.bam".format(cfg.PROJECT)
    freebayes_input = "{0}/mark_duplicates/{0}.bam".format(cfg.PROJECT)
    
# Indel realigner
if config["indel_realigner"]["do"]:
    include: sm.modules["create_sequence_dictionary"]
    include: sm.modules["indel_realigner"]
    freebayes_input = "{0}/indel_realigner/{0}.bam".format(cfg.PROJECT)

# Variant calling
include: sm.modules["freebayes"]

# VCF filter
include: sm.modules["vcf_filter"]

# Snakemake --------------------------------------------------------------------

rule all:
    input:
        final_output
