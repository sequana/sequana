"""Analysis of VCF file generated by freebayes.
"""
import sys
import vcf


class VCF(vcf.Reader):
    """VCF class (Variant Calling Format)

    This class is a wrapping of vcf.Reader class from the pyVCF package

    ::

        from sequana import sequana_data, VCF
        vcf_filename = sequana_data("test.vcf", "testing")

        # Read the data
        v = VCF(vcf_filename)

        # Filter the data
        filter_dict = {"QUAL": 10000, "FREQ": 0.85, 
            "INFO": {"DP": ">10", "AO": ">200", "SRP": "<100"}}
        v.filter_vcf(filter_dict)

    """
    def __init__(self, filename, **kwargs):
        """
        Filter vcf file with a dictionnary.

        :param str filename: a vcf file.
        :param kwargs: any arguments accepted by vcf.Reader
        """
        try:
            filin = open(filename, "r")
            vcf.Reader.__init__(self, fsock=filin, **kwargs)
        except IOError as e:
            print("I/O error({0}): {1}".format(e.errno, e.strerror))

    def _compute_freq(self, vcf_line):
        alt_freq = [float(count)/vcf_line.INFO["DP"] for count in \
                vcf_line.INFO["AO"]]
        return alt_freq

    def _filter_info_field(self, info_value, threshold):
        if(threshold.startswith("<")):
            if(threshold.startswith("<=")):
                if(info_value <= int(threshold[2:])):
                    return False
            elif(info_value < int(threshold[1:])):
                return False
        else:
            if(threshold.startswith(">=")):
                if(info_value >= int(threshold[2:])):
                    return False
            elif(info_value > int(threshold[1:])):
                return False
        return True

    def _filter_line(self, vcf_line, filter_dict):
        # dictionary must have QUAL/FREQ/INFO keys

        if(vcf_line.QUAL < filter_dict["QUAL"]):
            return False
        alt_freq = self._compute_freq(vcf_line)

        if(alt_freq[0] < filter_dict["FREQ"]):
            return False

        for key, value in filter_dict["INFO"].items():
            try:
                if(type(vcf_line.INFO[key]) != list):
                    if(self._filter_info_field(vcf_line.INFO[key], value)):
                        return False
                else:
                    if(self._filter_info_field(vcf_line.INFO[key][0], value)):
                        return False
            except KeyError:
                print("The information key doesn't exist in VCF file.\n")
        return True

    def filter_vcf(self, filter_dict, output):
        """Read the VCF file and write the filter vcf file.
        """
        with open(output, "w") as fp:
            vcf_writer = vcf.Writer(fp, self)
            for variant in self:
                if(self._filter_line(variant, filter_dict)):
                    vcf_writer.write_record(variant)

